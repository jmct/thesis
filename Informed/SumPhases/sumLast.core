\begin{verbatim}
main  = let eulerList =
            let xs = fromto 1 1000
            in par (fix rTail xs) (mapDefeuler xs)
        in par (fix mainS3 eulerList) (sum eulerList);

rTail f xs = case xs of
    Cons y ys -> seq (f ys) Unit;
    Nil       -> Unit;

rwhnf x = seq x Unit;

mainS3 f xs = case xs of
    Cons y ys -> par (rwhnf y) (seq (f ys) Unit);
    Nil       -> Unit

sum xs = case xs of
    Nil       -> 0;
    Cons y ys -> let rest = sum ys
                 in (par (rwhnf rest) ((y + rest)));

mapDefeuler xs = case xs of
    Nil       -> Nil;
    Cons y ys -> Cons (euler y) (mapDefeuler ys);

euler x = let ys = filter_relPrime x (fromto 1 x)
          in par (fix rTail ys) (length ys);

length xs = case xs of
    Nil       -> 0;
    Cons y ys -> let ys' = length ys
                 in (par (rwhnf ys') ((1 + ys')));


filter_relPrime x y = case y of
    Nil       -> Nil;
    Cons z zs ->
        let b = relPrime x z
        in (par (filter_relPrimeS0 b)
                (if b
                 then Cons z (filter_relPrime x zs)
                 else filterDefrelPrime x zs));

filter_relPrimeS0 b = case b of
    True  -> Unit;
    False -> Unit;

relPrime x y = let z = gcd x y
               in (par (rwhnf z) ((z == 1)));
\end{verbatim}
